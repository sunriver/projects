<project name="custom" basedir=".">
	<taskdef name="propertyregex" classname="net.sf.antcontrib.property.RegexTask" />

	<property name="build.dir" value="../../build" />
	<property name="key.store" value="${build.dir}/keystore2" />
	<property name="key.store.password" value="Yu87D1$j" />
	<property name="key.alias" value="listen key" />
	<property name="key.alias.password" value="Yu87D1$j" />
	<property name="manifest.file" value="./AndroidManifest.xml" />
	<property name="release.dir" value="${build.dir}/${ant.project.name}/release" />

	<loadfile property="version.content" srcFile="${manifest.file}" failonerror="true" />
	<target name="read_versionName">
		<echo message="read version name" />
		<propertyregex property="versionName_" input="${version.content}" regexp="android:versionName=[ /t]*&quot;([^>]+)&quot;" select="\1" casesensitive="false" />
		<echo message="versionName=${versionName_}" />
		<property name="verion.name" value="${versionName_}" />
	</target>

	<target name="custom_release" depends="read_versionName">
		<echo message="step1: clean all old files" />
		<property name="release.filename" value="${ant.project.name}_${verion.name}.apk" />
		<property name="out.final.file" value="${out.absolute.dir}/${release.filename}" />
		<echo message="step2: start to release" />
		<antcall target="release" />
		<echo message="step3: Copy apk to release directory '${release.dir}/${release.filename}'" />
		<copy tofile="${release.dir}/${release.filename}">
			<fileset dir="${out.absolute.dir}/" includes="${release.filename}" />
		</copy>
	</target>
</project>